import pandas as pd
import streamlit as st
import os
from dotenv import load_dotenv
import theme  # Importe votre fichier de th√®me
from packages.collecte import NewsCollector
from collections import Counter
from datetime import datetime, timedelta
import plotly.express as px
from packages.meteo import cybermeteo_ia
import google.generativeai as genai

load_dotenv()

# Applique les configurations de page et le th√®me
theme.set_page_defaults()  # Optionnel si main.py g√®re d√©j√† la config globale, mais bonne pratique
theme.apply_theme()


@st.cache_resource
def initialize_components():
    return NewsCollector()


def cyberveille():
    # En-t√™te principal
    st.markdown(
        """
    <div class="main-header">
        <h1 style="text-align: center;">üîí Cyber Threat Intelligence</h1>
        <p style="text-align: center; color: white; margin: 0;">Syst√®me de Veille Technologique & Chatbot M√©t√©o Cybercriminalit√©</p>
    </div>
    """,
        unsafe_allow_html=True,
    )

    # Initialisation
    collecte = initialize_components()

    # Sidebar pour les param√®tres
    st.sidebar.title("‚öôÔ∏è Configuration")

    # Configuration des APIs
    st.sidebar.subheader("üîå Configuration APIs")

    # NewsAPI
    with st.sidebar.expander("üì∞ NewsAPI"):
        # V√©rifie si la cl√© API est pr√©sente
        has_newsapi_key = bool(collecte.apis_config["newsapi"]["api_key"])

        # La checkbox est initialis√©e √† True si la cl√© est pr√©sente et l'API est d√©j√† activ√©e
        # Ou √† False si la cl√© est absente ou si l'API √©tait d√©sactiv√©e.
        newsapi_enabled_from_ui = st.checkbox(
            "Activer NewsAPI",
            value=collecte.apis_config["newsapi"]["enabled"]
            and has_newsapi_key,  # Coch√© si cl√© pr√©sente ET d√©j√† activ√©
            disabled=not has_newsapi_key,  # D√©sactive la checkbox si pas de cl√©
            help="Cochez pour activer NewsAPI. N√©cessite une cl√© API configur√©e dans le fichier .env",
        )

        # Met √† jour l'√©tat d'activation de l'API dans l'objet 'collecte'
        # Seulement si l'√©tat de la checkbox a chang√© ou si c'est la premi√®re ex√©cution
        if newsapi_enabled_from_ui != collecte.apis_config["newsapi"]["enabled"]:
            collecte.configure_api("newsapi", enabled=newsapi_enabled_from_ui)
            st.rerun()  # Reruns pour appliquer le changement imm√©diatement

        if has_newsapi_key:
            if collecte.apis_config["newsapi"]["enabled"]:
                st.success("‚úÖ NewsAPI est configur√© et actif.")
            else:
                st.info(
                    "‚ÑπÔ∏è NewsAPI est configur√© mais d√©sactiv√©. Cochez la case pour l'activer."
                )
        else:
            st.warning(
                "‚ö†Ô∏è NewsAPI n'est pas configur√©. Veuillez d√©finir NEWS_API_KEY dans votre fichier .env pour l'activer."
            )

    # GNews API
    with st.sidebar.expander("üåê GNews API"):
        has_gnews_key = bool(collecte.apis_config["gnews"]["api_key"])

        gnews_enabled_from_ui = st.checkbox(
            "Activer GNews API",
            value=collecte.apis_config["gnews"]["enabled"] and has_gnews_key,
            disabled=not has_gnews_key,
            help="Cochez pour activer GNews API. N√©cessite une cl√© API configur√©e dans le fichier .env",
        )

        if gnews_enabled_from_ui != collecte.apis_config["gnews"]["enabled"]:
            collecte.configure_api("gnews", enabled=gnews_enabled_from_ui)
            st.rerun()

        if has_gnews_key:
            if collecte.apis_config["gnews"]["enabled"]:
                st.success("‚úÖ GNews API est configur√© et actif.")
            else:
                st.info(
                    "‚ÑπÔ∏è GNews API est configur√© mais d√©sactiv√©. Cochez la case pour l'activer."
                )
        else:
            st.warning(
                "‚ö†Ô∏è GNews API n'est pas configur√©. Veuillez d√©finir GNEWS_API_KEY dans votre fichier .env pour l'activer."
            )

    # OTX Vault API
    with st.sidebar.expander("üõ°Ô∏è OTX Vault API"):
        # V√©rifie si la cl√© API est pr√©sente
        has_otx_key = bool(collecte.apis_config["otx"]["api_key"])

        # La checkbox est initialis√©e √† True si la cl√© est pr√©sente et l'API est d√©j√† activ√©e
        # Ou √† False si la cl√© est absente ou si l'API √©tait d√©sactiv√©e.
        otx_enabled_from_ui = st.checkbox(
            "Activer OTX Vault API",
            value=collecte.apis_config["otx"]["enabled"]
            and has_otx_key,  # Coch√© si cl√© pr√©sente ET d√©j√† activ√©
            disabled=not has_otx_key,  # D√©sactive la checkbox si pas de cl√©
            help="Cochez pour activer OTX Vault API. N√©cessite une cl√© API configur√©e dans le fichier .env",
        )

        # Met √† jour l'√©tat d'activation de l'API dans l'objet 'collecte'
        # Seulement si l'√©tat de la checkbox a chang√© ou si c'est la premi√®re ex√©cution
        if otx_enabled_from_ui != collecte.apis_config["otx"]["enabled"]:
            collecte.configure_api("otx", enabled=otx_enabled_from_ui)
            st.rerun()  # Reruns pour appliquer le changement imm√©diatement

        if has_otx_key:
            if collecte.apis_config["otx"]["enabled"]:
                st.success("‚úÖ OTX Vault API est configur√© et actif.")
            else:
                st.info(
                    "‚ÑπÔ∏è OTX Vault API est configur√© mais d√©sactiv√©. Cochez la case pour l'activer."
                )
        else:
            st.warning(
                "‚ö†Ô∏è OTX Vault API n'est pas configur√©. Veuillez d√©finir OTX_API_KEY dans votre fichier .env pour l'activer."
            )

    # Flux RSS
    with st.sidebar.expander("üì° Flux RSS"):
        # Garder cette checkbox car les RSS n'ont pas de cl√© API externe
        rss_enabled = st.checkbox(
            "Activer RSS", value=collecte.apis_config["rss_feeds"]["enabled"]
        )
        if rss_enabled != collecte.apis_config["rss_feeds"]["enabled"]:
            collecte.configure_api("rss_feeds", enabled=rss_enabled)
            st.rerun()
        st.write("Sources RSS actives:")
        for feed in collecte.apis_config["rss_feeds"]["feeds"]:
            st.write(f"‚Ä¢ {feed}")

    # Reddit
    with st.sidebar.expander("ü§ñ Reddit"):
        reddit_enabled = st.checkbox(
            "Activer Reddit", value=collecte.apis_config["reddit"]["enabled"]
        )
        collecte.configure_api("reddit", enabled=reddit_enabled)
        st.write("Subreddits surveill√©s:")
        for sub in collecte.apis_config["reddit"]["subreddits"]:
            st.write(f"‚Ä¢ r/{sub}")

    st.sidebar.markdown("---")

    # Param√®tres de collecte
    st.sidebar.subheader("üîç Collecte d'Articles")
    search_query = st.sidebar.text_input(
        "Mots-cl√©s de recherche", value="cybers√©curit√© France"
    )
    max_articles = st.sidebar.slider("Nombre d'articles", 5, 50, 20)
    auto_refresh = st.sidebar.checkbox("Actualisation automatique", value=False)

    if auto_refresh:
        refresh_interval = st.sidebar.slider("Intervalle (minutes)", 1, 60, 5)

    # Filtres
    st.sidebar.subheader("Filtres")
    threat_levels = st.sidebar.multiselect(
        "Niveaux de menace",
        ["critical", "high", "medium", "low"],
        default=["critical", "high", "medium", "low"],
    )

    categories = st.sidebar.multiselect(
        "Cat√©gories",
        [
            "Ransomware",
            "Phishing",
            "Malware",
            "Data Breach",
            "Infrastructure",
            "APT",
            "Vulnerability",
            "DDoS",
            "General",
        ],
        default=[
            "Ransomware",
            "Phishing",
            "Malware",
            "Data Breach",
            "Infrastructure",
            "APT",
            "Vulnerability",
            "DDoS",
            "General",
        ],
    )

    # Bouton de collecte
    if st.sidebar.button("üîÑ Actualiser les donn√©es", type="primary"):
        with st.spinner("Collecte des articles en cours..."):
            articles = collecte.search_news(search_query, max_articles)
            st.session_state.articles = articles
            st.success(f"‚úÖ {len(articles)} articles collect√©s")

    # Initialisation des donn√©es si n√©cessaire
    if "articles" not in st.session_state:
        st.session_state.articles = collecte.search_news(search_query, max_articles)

    # Onglets principaux
    tab1, tab2, tab3, tab4 = st.tabs(
        ["üìä Dashboard", "üì∞ Articles", "ü§ñ Chatbot M√©t√©o", "üìà Analyses"]
    )

    with tab1:
        st.header("üìä Dashboard de Veille")

        # M√©triques principales
        col1, col2, col3, col4 = st.columns(4)

        articles = st.session_state.articles

        with col1:
            st.metric("üì∞ Total Articles", len(articles))

        with col2:
            critical_count = sum(
                1 for a in articles if a.get("threat_level") == "critical"
            )
            st.metric("üî¥ Menaces Critiques", critical_count)

        with col3:
            high_count = sum(1 for a in articles if a.get("threat_level") == "high")
            st.metric("üü† Menaces √âlev√©es", high_count)

        with col4:
            today_count = sum(
                1
                for a in articles
                if a["published_date"].date() == datetime.now().date()
            )
            st.metric("üìÖ Aujourd'hui", today_count)

        # Graphiques
        col1, col2 = st.columns(2)

        with col1:
            # R√©partition par niveau de menace
            threat_counts = Counter(a.get("threat_level", "unknown") for a in articles)
            fig_threat = px.pie(
                values=list(threat_counts.values()),
                names=list(threat_counts.keys()),
                title="R√©partition par Niveau de Menace",
                color_discrete_map={
                    "critical": "#ff4444",
                    "high": "#ff8800",
                    "medium": "#ffcc00",
                    "low": "#44ff44",
                },
            )
            st.plotly_chart(fig_threat, use_container_width=True)

        with col2:
            # √âvolution temporelle
            df_time = pd.DataFrame(articles)
            df_time["published_date"] = pd.to_datetime(
                df_time["published_date"].astype(str), utc=True, errors="coerce"
            )
            df_time["date"] = df_time["published_date"].dt.date
            time_counts = df_time.groupby("date").size().reset_index(name="count")

            fig_time = px.line(
                time_counts,
                x="date",
                y="count",
                title="√âvolution du Nombre d'Articles",
                markers=True,
            )
            st.plotly_chart(fig_time, use_container_width=True)

    with tab2:
        st.header("üì∞ Articles de Presse")
        # Filtrage des articles
        filtered_articles = [
            a
            for a in articles
            if a.get("threat_level") in threat_levels
            and a.get("category") in categories
        ]

        st.write(f"Affichage de {len(filtered_articles)} articles")

        # Affichage des articles
        for article in filtered_articles:
            threat_level = article.get("threat_level", "unknown")
            threat_class = f"threat-level-{threat_level}"
            api_source = article.get("api_source", "unknown")

            # Ic√¥ne selon la source API
            source_icons = {
                "newsapi": "üì∞",
                "gnews": "üåê",
                "rss": "üì°",
                "reddit": "ü§ñ",
                "simulation": "üîÑ",
            }
            source_icon = source_icons.get(api_source, "üìÑ")

            st.markdown(
                f"""
            <div class="news-card">
                <h3>{source_icon} {article['title']}</h3>
                <div class="{threat_class}">
                    Niveau de menace: {threat_level.upper()}
                </div>
                <p><strong>Source:</strong> {article['source']} | 
                   <strong>Date:</strong> {article['published_date'].strftime('%d/%m/%Y %H:%M')} |
                   <strong>Cat√©gorie:</strong> {article.get('category', 'N/A')} |
                   <strong>API:</strong> {api_source}</p>
                <p>{article['summary']}</p>
                <p><strong>Mots-cl√©s:</strong> {', '.join(article.get('keywords', []))}</p>
                <a href="{article['url']}" target="_blank">üîó Lire l'article complet</a>
            </div>
            """,
                unsafe_allow_html=True,
            )

    with tab3:
        GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
        st.header("ü§ñ Chatbot M√©t√©o Cybercriminalit√©")

        # === M√©t√©o Cyber (mise √† jour automatique) ===
        col_weather, col_chat = st.columns([1, 2])

        # partie cyber m√©t√©o
        with col_weather:
            st.markdown("### üå§Ô∏è M√©t√©o Cyber du Jour")
            if st.button("üöÄ G√©n√©rer le rapport du jour"):
                with st.spinner("G√©n√©ration du rapport..."):
                    articles = cybermeteo_ia.fetch_fresh_articles()
                    report = cybermeteo_ia.generate_cyber_weather_report(articles)
                st.markdown(report)

                today = cybermeteo_ia.datetime.now(cybermeteo_ia.timezone.utc).strftime(
                    "%Y-%m-%d"
                )
                st.download_button(
                    "üíæ T√©l√©charger le rapport",
                    data=report,
                    file_name=f"cyber_weather_report_{today}.md",
                    mime="text/markdown",
                )

        # partie chatbot
        with col_chat:
            st.markdown("### ü§î Questions √† poser, URL, adresse mail √† v√©rifier")
            genai.configure(api_key=GOOGLE_API_KEY)
            # Prompt syst√®me
            system_prompt = """
            Tu es un expert en cybers√©curit√© et en veille sur les menaces, sp√©cialis√© sur le contexte fran√ßais.
            Ton objectif est de fournir des informations pr√©cises, compl√®tes, et √† jour sur les menaces cyber, les incidents, les vuln√©rabilit√©s et les bonnes pratiques.
            Lorsque l'utilisateur pose une question, utilise les informations suivantes (si pertinentes) pour y r√©pondre.
            Tu donnes des r√©ponses pr√©cises pour un public qui te donnera, soit une URL, une adresse mail ( a v√©rifier sur : https://haveibeenpwned.com/)
            que tu verifera, analysera afin de savoir si ce dernier est s√ªr.
            Si la question ne concerne pas la cyber s√©curit√©, indique que tu ne peux r√©pondre qu'√† ce sujet.
            """

            # Fonction pour initialiser le chat
            def init_chat():
                model = genai.GenerativeModel("gemini-2.0-flash")
                chat = model.start_chat(
                    history=[
                        {"role": "user", "parts": [system_prompt]},
                        {
                            "role": "model",
                            "parts": [
                                "Compris, je suis pr√™t √† te proposer des recommandations."
                            ],
                        },
                    ]
                )
                return chat

            # Initialisation du chat
            if "chat" not in st.session_state:
                st.session_state.chat = init_chat()
                st.session_state.messages = [
                    {"role": "assistant", "text": "Aucune reco disponible ? üîé "}
                ]

            # Champ de saisie
            user_input = st.chat_input("URL, Adresse mail ou fichier ?")

            # Affichage de la discussion
            for msg in st.session_state.messages:
                with st.chat_message(msg["role"]):
                    st.markdown(msg["text"])

            # Traitement du message
            if user_input:
                # Afficher le message de l'utilisateur
                st.session_state.messages.append({"role": "user", "text": user_input})
                with st.chat_message("user"):
                    st.markdown(user_input)

                # Obtenir la r√©ponse de Gemini
                response = st.session_state.chat.send_message(user_input)

                # Afficher la r√©ponse du bot
                st.session_state.messages.append(
                    {"role": "assistant", "text": response.text}
                )
                with st.chat_message("assistant"):
                    st.markdown(response.text)

            # Bouton de r√©initialisation en dessous de la zone de texte du chatbot
            if st.button("R√©initialiser S√©cuBot ü§ñ", key="reset_button"):
                st.session_state.chat = init_chat()
                st.session_state.messages = [
                    {"role": "assistant", "text": "URL, Adresse mail ou fichier  ? üîé"}
                ]
                st.rerun()

    with tab4:
        st.header("üìà Analyses Approfondies")

        # Analyse des mots-cl√©s
        st.subheader("üîç Analyse des Mots-cl√©s")

        all_keywords = []
        for article in articles:
            all_keywords.extend(article.get("keywords", []))

        if all_keywords:
            keyword_counts = Counter(all_keywords)
            top_keywords = keyword_counts.most_common(10)

            fig_keywords = px.bar(
                x=[k[1] for k in top_keywords],
                y=[k[0] for k in top_keywords],
                orientation="h",
                title="Top 10 des Mots-cl√©s",
                labels={"x": "Fr√©quence", "y": "Mots-cl√©s"},
            )
            st.plotly_chart(fig_keywords, use_container_width=True)

        # Analyse des sources
        st.subheader("üì∞ Analyse des Sources")

        source_counts = Counter(a["source"] for a in articles)
        df_sources = pd.DataFrame(
            {
                "Source": list(source_counts.keys()),
                "Nombre d'articles": list(source_counts.values()),
            }
        )

        fig_sources = px.bar(
            df_sources,
            x="Source",
            y="Nombre d'articles",
            labels={"Source": "Source", "Nombre d'articles": "Nombre d'articles"},
        )
        st.plotly_chart(fig_sources, use_container_width=True)

        # Heatmap des menaces par cat√©gorie
        st.subheader("üî• Heatmap des Menaces")

        threat_category_matrix = {}
        for article in articles:
            category = article.get("category", "Unknown")
            threat_level = article.get("threat_level", "unknown")

            if category not in threat_category_matrix:
                threat_category_matrix[category] = {}
            if threat_level not in threat_category_matrix[category]:
                threat_category_matrix[category][threat_level] = 0
            threat_category_matrix[category][threat_level] += 1

        # Conversion en DataFrame pour la heatmap
        if threat_category_matrix:
            df_heatmap = pd.DataFrame(threat_category_matrix).fillna(0)

            fig_heatmap = px.imshow(
                df_heatmap,
                title="Heatmap: Cat√©gories vs Niveaux de Menace",
                color_continuous_scale="Reds",
                aspect="auto",
            )
            st.plotly_chart(fig_heatmap, use_container_width=True)

    # Footer
    st.markdown("---")
    st.markdown(
        f"""
        <div style="text-align: center; color: #666; margin-top: 2rem;">
            <p style='text-align: center; color: {theme.COLORS['GREY_SLOGAN']}; font-size: 0.9em;'>¬© 2025 Cyber Dragon. Tous droits r√©serv√©s.</p>
            <p>Derni√®re mise √† jour: {datetime.now().strftime("%d/%m/%Y %H:%M")}</p>
        </div>
        """,
        unsafe_allow_html=True,
    )


if __name__ == "__main__":
    cyberveille()
